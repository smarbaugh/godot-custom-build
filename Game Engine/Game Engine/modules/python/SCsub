#!/usr/bin/env python

Import('env')

module_env = env.Clone()

# Add Python include directories
import subprocess
import os

def get_python_includes():
    try:
        return subprocess.check_output(['python3-config', '--includes']).decode().strip().split()
    except:
        try:
            import distutils.sysconfig
            return ['-I' + distutils.sysconfig.get_python_inc()]
        except:
            return []

def get_python_libs():
    try:
        return subprocess.check_output(['python3-config', '--libs']).decode().strip().split()
    except:
        try:
            import distutils.sysconfig
            return ['-lpython' + distutils.sysconfig.get_config_var('VERSION')]
        except:
            return []

# Add Python configuration
module_env.Append(CPPPATH=['#modules/python/include'])
module_env.Append(CPPFLAGS=get_python_includes())
module_env.Append(LIBS=get_python_libs())

# Source files
sources = [
    'src/python_bridge.cpp',
]

# Build the module
module_env.add_source_files(env.modules_sources, sources)

# Register the module
def register_python_types():
    from compat import open_text
    with open_text('modules/python/register_types.h', 'w') as f:
        f.write('''
#ifndef PYTHON_REGISTER_TYPES_H
#define PYTHON_REGISTER_TYPES_H

void register_python_types();
void unregister_python_types();

#endif // PYTHON_REGISTER_TYPES_H
''')

    with open_text('modules/python/register_types.cpp', 'w') as f:
        f.write('''
#include "register_types.h"
#include "core/class_db.h"
#include "python_bridge.h"

void register_python_types() {
    ClassDB::register_class<PythonBridge>();
}

void unregister_python_types() {
}
''')

register_python_types()

# Add the registration files to the build
module_env.add_source_files(env.modules_sources, ['register_types.cpp']) 